{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ContactCard","props","console","log","avatar","name","email","age","useState","showAge","setShowAge","className","src","alt","onClick","App","contacts","setContacts","useEffect","fetch","then","response","json","data","results","map","contact","picture","large","first","last","dob","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oPAeMA,G,MAAc,SAAAC,GAClBC,QAAQC,IAAIF,EAAMG,QAClBF,QAAQC,IAAIF,EAAMI,MAClBH,QAAQC,IAAIF,EAAMK,OAClBJ,QAAQC,IAAIF,EAAMM,KAJS,MAKGC,oBAAS,GALZ,mBAKpBC,EALoB,KAKXC,EALW,KAM3B,OACE,yBAAKC,UAAU,gBACb,yBAAKC,IAAKX,EAAMG,OAAQS,IAAI,YAC5B,yBAAKF,UAAU,gBACb,oCAAUV,EAAMI,MAChB,qCAAWJ,EAAMK,OACjB,4BAAQQ,QAAS,kBAAMJ,GAAYD,KAAnC,cAIAA,GAAW,mCAASR,EAAMM,SA0EnBQ,EAnEH,WAAM,MAqCgBP,mBAAS,IArCzB,mBAqCTQ,EArCS,KAqCCC,EArCD,KAmDhB,OAZAC,qBAAU,WACRC,MAAM,wCACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJrB,QAAQC,IAAIoB,GACZN,EAAYM,EAAKC,cAGhB,IAKD,oCACI,kDACHR,EAASS,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAD,CACAtB,OAAUsB,EAAQC,QAAQC,MAC1BvB,KAAQqB,EAAQrB,KAAKwB,MAAQ,GAAKH,EAAQrB,KAAKyB,KAC/CxB,MAASoB,EAAQpB,MACjBC,IAAOmB,EAAQK,IAAIxB,WCrFLyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.771368f8.chunk.js","sourcesContent":["/*\n * Created on Saturday, 1st August 2020 11:59::39 pm\n * @author: mtc-20\n *  Coded on VS Code 2019\n * ------\n * Overview:\n *  Taken from https://www.freecodecamp.org/news/getting-started-with-react-a-modern-project-based-guide-for-beginners-including-hooks-2/#creatingareactapp\n * ------\n * Last Modified: Sun Oct 04 2020\n */\n\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nconst ContactCard = props => {\n  console.log(props.avatar);\n  console.log(props.name);\n  console.log(props.email);\n  console.log(props.age);\n  const [showAge, setShowAge] = useState(false);\n  return (\n    <div className=\"contact-card\">\n      <img src={props.avatar} alt=\"profile\"/>\n      <div className=\"user-details\">\n        <p>Name: {props.name}</p>\n        <p>Email: {props.email}</p>\n        <button onClick={() => setShowAge(!showAge)}>\n          Toggle Age\n        </button>\n        {/* {showAge === true ? <p>Age: 25</p> :null} */\n        showAge && <p>Age: {props.age}</p>}\n        \n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  // Sample data\n  // const contacts = [\n  //   { name: \"Jenny Han\", email: \"jenny.han@notreal.com\", age: 25 },\n  //   { name: \"Jason Long\", email: \"jason.long@notreal.com\", age: 45 },\n  //   { name: \"Peter Pan\", email: \"peter.pan@neverland.com\", age: 100 },\n  //   { name: \"Amy McDonald\", email: \"amy@email.com\", age: 33 }\n  // ];\n  // return (\n  //   <>\n  //   {\n  //   contacts.map(contact =>\n  //     <ContactCard\n  //     avatar = \"https://via.placeholder.com/150\"\n  //     name = {contact.name}\n  //     email = {contact.email}\n  //     age = {contact.age}\n  //     />\n  //   )\n  //   /* <ContactCard \n  //   avatar = \"https://via.placeholder.com/150\"\n  //   name = \"ABC\"\n  //   email = \"AB@XY.com\"\n  //   age = {25}/>\n  //   <ContactCard \n  //   avatar = \"https://via.placeholder.com/150\"\n  //   name = \"DEF\"\n  //   email = \"DE@XY.com\"\n  //   age = {45}/>\n  //   <ContactCard \n  //   avatar = \"https://via.placeholder.com/150\"\n  //   name = \"JKL\"\n  //   email = \"JK@XY.com\"\n  //   age = {19}/> */}\n  //   </>\n  // );\n\n  const [contacts, setContacts] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://randomuser.me/api/?results=5\")\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n    setContacts(data.results);\n  });\n\n  }, [])\n\n  \n\n  return (\n    <>\n        <h1>My First React App</h1>\n    {contacts.map(contact => (\n      <ContactCard\n      avatar = {contact.picture.large}\n      name = {contact.name.first + '' + contact.name.last}\n      email = {contact.email}\n      age = {contact.dob.age}\n      />\n      ))}\n    </>\n  );\n\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}